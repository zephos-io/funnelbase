// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.6.1
// source: api/funnelbase.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Funnelbase_QueueRequest_FullMethodName = "/requester.Funnelbase/QueueRequest"
	Funnelbase_AddInterface_FullMethodName = "/requester.Funnelbase/AddInterface"
	Funnelbase_AddRateLimit_FullMethodName = "/requester.Funnelbase/AddRateLimit"
)

// FunnelbaseClient is the client API for Funnelbase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunnelbaseClient interface {
	QueueRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*InterfaceResponse, error)
	AddRateLimit(ctx context.Context, in *RateLimit, opts ...grpc.CallOption) (*RateLimitResponse, error)
}

type funnelbaseClient struct {
	cc grpc.ClientConnInterface
}

func NewFunnelbaseClient(cc grpc.ClientConnInterface) FunnelbaseClient {
	return &funnelbaseClient{cc}
}

func (c *funnelbaseClient) QueueRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Funnelbase_QueueRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funnelbaseClient) AddInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*InterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InterfaceResponse)
	err := c.cc.Invoke(ctx, Funnelbase_AddInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funnelbaseClient) AddRateLimit(ctx context.Context, in *RateLimit, opts ...grpc.CallOption) (*RateLimitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RateLimitResponse)
	err := c.cc.Invoke(ctx, Funnelbase_AddRateLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunnelbaseServer is the server API for Funnelbase service.
// All implementations must embed UnimplementedFunnelbaseServer
// for forward compatibility
type FunnelbaseServer interface {
	QueueRequest(context.Context, *Request) (*Response, error)
	AddInterface(context.Context, *Interface) (*InterfaceResponse, error)
	AddRateLimit(context.Context, *RateLimit) (*RateLimitResponse, error)
	mustEmbedUnimplementedFunnelbaseServer()
}

// UnimplementedFunnelbaseServer must be embedded to have forward compatible implementations.
type UnimplementedFunnelbaseServer struct {
}

func (UnimplementedFunnelbaseServer) QueueRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueRequest not implemented")
}
func (UnimplementedFunnelbaseServer) AddInterface(context.Context, *Interface) (*InterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterface not implemented")
}
func (UnimplementedFunnelbaseServer) AddRateLimit(context.Context, *RateLimit) (*RateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRateLimit not implemented")
}
func (UnimplementedFunnelbaseServer) mustEmbedUnimplementedFunnelbaseServer() {}

// UnsafeFunnelbaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunnelbaseServer will
// result in compilation errors.
type UnsafeFunnelbaseServer interface {
	mustEmbedUnimplementedFunnelbaseServer()
}

func RegisterFunnelbaseServer(s grpc.ServiceRegistrar, srv FunnelbaseServer) {
	s.RegisterService(&Funnelbase_ServiceDesc, srv)
}

func _Funnelbase_QueueRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunnelbaseServer).QueueRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Funnelbase_QueueRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunnelbaseServer).QueueRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funnelbase_AddInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunnelbaseServer).AddInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Funnelbase_AddInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunnelbaseServer).AddInterface(ctx, req.(*Interface))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funnelbase_AddRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunnelbaseServer).AddRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Funnelbase_AddRateLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunnelbaseServer).AddRateLimit(ctx, req.(*RateLimit))
	}
	return interceptor(ctx, in, info, handler)
}

// Funnelbase_ServiceDesc is the grpc.ServiceDesc for Funnelbase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Funnelbase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "requester.Funnelbase",
	HandlerType: (*FunnelbaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueRequest",
			Handler:    _Funnelbase_QueueRequest_Handler,
		},
		{
			MethodName: "AddInterface",
			Handler:    _Funnelbase_AddInterface_Handler,
		},
		{
			MethodName: "AddRateLimit",
			Handler:    _Funnelbase_AddRateLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/funnelbase.proto",
}
